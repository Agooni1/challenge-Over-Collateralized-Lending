{
  "address": "0x6A13AfDf00b4e5d0028c5Cd418a81418841Abd78",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_cornDEX",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_corn",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Lending__BorrowingFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lending__FlashLoanFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lending__InsufficientLiquidatorCorn",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lending__InvalidAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lending__NotLiquidatable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lending__RepayingFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lending__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lending__UnsafePositionRatio",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "AssetBorrowed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "AssetRepaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "CollateralAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "CollateralWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountForLiquidator",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidatedUserDebt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "Liquidation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "addCollateral",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        }
      ],
      "name": "borrowCorn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "calculateCollateralValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IFlashLoanRecipient",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_extraParam",
          "type": "address"
        }
      ],
      "name": "flashLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_ethAmount",
          "type": "uint256"
        }
      ],
      "name": "getMaxBorrowAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getMaxWithdrawableCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "isLiquidatable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        }
      ],
      "name": "repayCorn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_userBorrowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_userCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7511707e92c7206d3e439ef319df3907b0d4ef01a784cb0d3b829f05f241a33b",
  "receipt": {
    "to": null,
    "from": "0xcC6eDeB501BbD8AD9E028BDe937B63Cdd64A1D91",
    "contractAddress": "0x6A13AfDf00b4e5d0028c5Cd418a81418841Abd78",
    "transactionIndex": 96,
    "gasUsed": "1287635",
    "logsBloom": "0x
    "blockHash": "0x7f4fae27dc87ce0cc4a5165352c7f54d75f29a911b5aaca91a017d8552774d21",
    "transactionHash": "0x7511707e92c7206d3e439ef319df3907b0d4ef01a784cb0d3b829f05f241a33b",
    "logs": [
      {
        "transactionIndex": 96,
        "blockNumber": 8806587,
        "transactionHash": "0x7511707e92c7206d3e439ef319df3907b0d4ef01a784cb0d3b829f05f241a33b",
        "address": "0x6A13AfDf00b4e5d0028c5Cd418a81418841Abd78",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000cc6edeb501bbd8ad9e028bde937b63cdd64a1d91"
        ],
        "data": "0x",
        "logIndex": 183,
        "blockHash": "0x7f4fae27dc87ce0cc4a5165352c7f54d75f29a911b5aaca91a017d8552774d21"
      },
      {
        "transactionIndex": 96,
        "blockNumber": 8806587,
        "transactionHash": "0x7511707e92c7206d3e439ef319df3907b0d4ef01a784cb0d3b829f05f241a33b",
        "address": "0xbAB68f06A109d7CC049c8783d3467a45cc03Fe96",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000006a13afdf00b4e5d0028c5cd418a81418841abd78",
          "0x0000000000000000000000006a13afdf00b4e5d0028c5cd418a81418841abd78"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 184,
        "blockHash": "0x7f4fae27dc87ce0cc4a5165352c7f54d75f29a911b5aaca91a017d8552774d21"
      }
    ],
    "blockNumber": 8806587,
    "cumulativeGasUsed": "15882563",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x13b72aC574b1d046e215666C608f00484Af682f2",
    "0xbAB68f06A109d7CC049c8783d3467a45cc03Fe96"
  ],
  "numDeployments": 2,
  "solcInputHash": "7fbd28f90d71ac1a3668d71e23fef43e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cornDEX\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_corn\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Lending__BorrowingFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lending__FlashLoanFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lending__InsufficientLiquidatorCorn\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lending__InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lending__NotLiquidatable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lending__RepayingFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lending__TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lending__UnsafePositionRatio\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"AssetBorrowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"AssetRepaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"CollateralAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"CollateralWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountForLiquidator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidatedUserDebt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Liquidation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addCollateral\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"name\":\"borrowCorn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"calculateCollateralValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFlashLoanRecipient\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_extraParam\",\"type\":\"address\"}],\"name\":\"flashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ethAmount\",\"type\":\"uint256\"}],\"name\":\"getMaxBorrowAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getMaxWithdrawableCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isLiquidatable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"}],\"name\":\"repayCorn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_userBorrowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_userCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"borrowCorn(uint256)\":{\"params\":{\"borrowAmount\":\"The amount of corn to borrow\"}},\"calculateCollateralValue(address)\":{\"params\":{\"user\":\"The address of the user to calculate the collateral value for\"},\"returns\":{\"_0\":\"uint256 The collateral value\"}},\"isLiquidatable(address)\":{\"params\":{\"user\":\"The address of the user to check\"},\"returns\":{\"_0\":\"bool True if the position is liquidatable, false otherwise\"}},\"liquidate(address)\":{\"details\":\"The caller must have enough CORN to pay back user's debtThe caller must have approved this contract to transfer the debt\",\"params\":{\"user\":\"The address of the user to liquidate\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"repayCorn(uint256)\":{\"params\":{\"repayAmount\":\"The amount of corn to repay\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawCollateral(uint256)\":{\"params\":{\"_amount\":\"The amount of collateral to withdraw\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addCollateral()\":{\"notice\":\"Allows users to add collateral to their account\"},\"borrowCorn(uint256)\":{\"notice\":\"Allows users to borrow corn based on their collateral\"},\"calculateCollateralValue(address)\":{\"notice\":\"Calculates the total collateral value for a user based on their collateral balance\"},\"isLiquidatable(address)\":{\"notice\":\"Checks if a user's position can be liquidated\"},\"liquidate(address)\":{\"notice\":\"Allows liquidators to liquidate unsafe positions\"},\"repayCorn(uint256)\":{\"notice\":\"Allows users to repay corn and reduce their debt\"},\"withdrawCollateral(uint256)\":{\"notice\":\"Allows users to withdraw collateral as long as it doesn't make them liquidatable\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Lending.sol\":\"Lending\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/Corn.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nerror Corn__InvalidAmount();\\nerror Corn__InsufficientBalance();\\nerror Corn__InsufficientAllowance();\\nerror Corn__InvalidAddress();\\n\\ncontract Corn is ERC20, Ownable {\\n    constructor() ERC20(\\\"CORN\\\", \\\"CORN\\\") Ownable(msg.sender) {}\\n\\n    function burnFrom(address account, uint256 amount) external onlyOwner returns (bool) {\\n        uint256 balance = balanceOf(account);\\n        if (amount == 0) {\\n            revert Corn__InvalidAmount();\\n        }\\n        if (balance < amount) {\\n            revert Corn__InsufficientBalance();\\n        }\\n        _burn(account, amount);\\n        return true;\\n    }\\n\\n    function mintTo(address to, uint256 amount) external onlyOwner returns (bool) {\\n        if (to == address(0)) {\\n            revert Corn__InvalidAddress();\\n        }\\n        if (amount == 0) {\\n            revert Corn__InvalidAmount();\\n        }\\n        _mint(to, amount);\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xdf8c3ab2690644eafe9dfbe86a6d80e2c75937102219f9f3d84279f62b9e89b8\",\"license\":\"UNLICENSED\"},\"contracts/CornDEX.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @notice Simple DEX contract that allows users to swap ETH for CORN and CORN for ETH\\n */\\ncontract CornDEX {\\n    /* ========== GLOBAL VARIABLES ========== */\\n\\n    IERC20 token; //instantiates the imported contract\\n    uint256 public totalLiquidity;\\n    mapping(address => uint256) public liquidity;\\n\\n    /* ========== EVENTS ========== */\\n\\n    event Swap(address swapper, address inputToken, uint256 inputAmount, address outputToken, uint256 outputAmount);\\n    event PriceUpdated(uint256 price);\\n    /**\\n     * @notice Emitted when liquidity provided to DEX and mints LPTs.\\n     */\\n    event LiquidityProvided(address liquidityProvider, uint256 liquidityMinted, uint256 ethInput, uint256 tokensInput);\\n\\n    /**\\n     * @notice Emitted when liquidity removed from DEX and decreases LPT count within DEX.\\n     */\\n    event LiquidityRemoved(\\n        address liquidityRemover,\\n        uint256 liquidityWithdrawn,\\n        uint256 tokensOutput,\\n        uint256 ethOutput\\n    );\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    constructor(address tokenAddr) {\\n        token = IERC20(tokenAddr); //specifies the token address that will hook into the interface and be used through the variable 'token'\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    /**\\n     * @notice initializes amount of tokens that will be transferred to the DEX itself from the erc20 contract. Loads contract up with both ETH and CORN.\\n     * @param tokens amount to be transferred to DEX\\n     * @return totalLiquidity is the number of LPTs minting as a result of deposits made to DEX contract\\n     * NOTE: since ratio is 1:1, this is fine to initialize the totalLiquidity as equal to eth balance of contract.\\n     */\\n    function init(uint256 tokens) public payable returns (uint256) {\\n        require(totalLiquidity == 0, \\\"DEX: init - already has liquidity\\\");\\n        totalLiquidity = address(this).balance;\\n        liquidity[msg.sender] = totalLiquidity;\\n        require(token.transferFrom(msg.sender, address(this), tokens), \\\"DEX: init - transfer did not transact\\\");\\n        return totalLiquidity;\\n    }\\n\\n    /**\\n     * @notice returns the amount you should receive (yOutput) when given the reserves of both assets in the pool\\n     */\\n    function price(uint256 xInput, uint256 xReserves, uint256 yReserves) public pure returns (uint256 yOutput) {\\n        uint256 numerator = xInput * yReserves;\\n        uint256 denominator = (xReserves) + xInput;\\n        return (numerator / denominator);\\n    }\\n\\n    /**\\n     * @notice returns the current price of ETH in CORN\\n     */\\n    function currentPrice() public view returns (uint256 _currentPrice) {\\n        _currentPrice = price(1 ether, address(this).balance, token.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @notice returns the amount you need to put in (xInput) when given the amount of yOutput you want along with the reserves of both assets in the pool\\n     */\\n    function calculateXInput(\\n        uint256 yOutput,\\n        uint256 xReserves,\\n        uint256 yReserves\\n    ) public pure returns (uint256 xInput) {\\n        uint256 numerator = yOutput * xReserves;\\n        uint256 denominator = yReserves - yOutput;\\n\\n        return (numerator / denominator) + 1;\\n    }\\n\\n    /**\\n     * @notice sends Ether to DEX in exchange for $CORN\\n     */\\n    function ethToToken() internal returns (uint256 tokenOutput) {\\n        require(msg.value > 0, \\\"cannot swap 0 ETH\\\");\\n        uint256 ethReserve = address(this).balance - msg.value;\\n        uint256 tokenReserve = token.balanceOf(address(this));\\n        tokenOutput = price(msg.value, ethReserve, tokenReserve);\\n\\n        require(token.transfer(msg.sender, tokenOutput), \\\"ethToToken(): reverted swap.\\\");\\n        emit Swap(msg.sender, address(0), msg.value, address(token), tokenOutput);\\n        return tokenOutput;\\n    }\\n\\n    /**\\n     * @notice sends $CORN tokens to DEX in exchange for Ether\\n     */\\n    function tokenToEth(uint256 tokenInput) internal returns (uint256 ethOutput) {\\n        require(tokenInput > 0, \\\"cannot swap 0 tokens\\\");\\n        require(token.balanceOf(msg.sender) >= tokenInput, \\\"insufficient token balance\\\");\\n        require(token.allowance(msg.sender, address(this)) >= tokenInput, \\\"insufficient allowance\\\");\\n        uint256 tokenReserve = token.balanceOf(address(this));\\n        ethOutput = price(tokenInput, tokenReserve, address(this).balance);\\n        require(token.transferFrom(msg.sender, address(this), tokenInput), \\\"tokenToEth(): reverted swap.\\\");\\n        (bool sent, ) = msg.sender.call{ value: ethOutput }(\\\"\\\");\\n        require(sent, \\\"tokenToEth: revert in transferring eth to you!\\\");\\n        emit Swap(msg.sender, address(token), tokenInput, address(0), ethOutput);\\n        return ethOutput;\\n    }\\n\\n    /**\\n     * @notice allows users to swap ETH for $CORN or $CORN for ETH with a single method\\n     */\\n    function swap(uint256 inputAmount) public payable returns (uint256 outputAmount) {\\n        if (msg.value > 0 && inputAmount == msg.value) {\\n            outputAmount = ethToToken();\\n        } else {\\n            outputAmount = tokenToEth(inputAmount);\\n        }\\n        emit PriceUpdated(currentPrice());\\n    }\\n\\n    /**\\n     * @notice allows deposits of $CORN and $ETH to liquidity pool\\n     * NOTE: parameter is the msg.value sent with this function call. That amount is used to determine the amount of $CORN needed as well and taken from the depositor.\\n     * NOTE: user has to make sure to give DEX approval to spend their tokens on their behalf by calling approve function prior to this function call.\\n     * NOTE: Equal parts of both assets will be removed from the user's wallet with respect to the price outlined by the AMM.\\n     */\\n    function deposit() public payable returns (uint256 tokensDeposited) {\\n        require(msg.value > 0, \\\"Must send value when depositing\\\");\\n        uint256 ethReserve = address(this).balance - msg.value;\\n        uint256 tokenReserve = token.balanceOf(address(this));\\n        uint256 tokenDeposit;\\n\\n        tokenDeposit = ((msg.value * tokenReserve) / ethReserve) + 1;\\n\\n        require(token.balanceOf(msg.sender) >= tokenDeposit, \\\"insufficient token balance\\\");\\n        require(token.allowance(msg.sender, address(this)) >= tokenDeposit, \\\"insufficient allowance\\\");\\n\\n        uint256 liquidityMinted = (msg.value * totalLiquidity) / ethReserve;\\n        liquidity[msg.sender] += liquidityMinted;\\n        totalLiquidity += liquidityMinted;\\n\\n        require(token.transferFrom(msg.sender, address(this), tokenDeposit));\\n        emit LiquidityProvided(msg.sender, liquidityMinted, msg.value, tokenDeposit);\\n        return tokenDeposit;\\n    }\\n\\n    /**\\n     * @notice allows withdrawal of $CORN and $ETH from liquidity pool\\n     * NOTE: with this current code, the msg caller could end up getting very little back if the liquidity is super low in the pool. I guess they could see that with the UI.\\n     */\\n    function withdraw(uint256 amount) public returns (uint256 ethAmount, uint256 tokenAmount) {\\n        require(liquidity[msg.sender] >= amount, \\\"withdraw: sender does not have enough liquidity to withdraw.\\\");\\n        uint256 ethReserve = address(this).balance;\\n        uint256 tokenReserve = token.balanceOf(address(this));\\n        uint256 ethWithdrawn;\\n\\n        ethWithdrawn = (amount * ethReserve) / totalLiquidity;\\n\\n        tokenAmount = (amount * tokenReserve) / totalLiquidity;\\n        liquidity[msg.sender] -= amount;\\n        totalLiquidity -= amount;\\n        (bool sent, ) = payable(msg.sender).call{ value: ethWithdrawn }(\\\"\\\");\\n        require(sent, \\\"withdraw(): revert in transferring eth to you!\\\");\\n        require(token.transfer(msg.sender, tokenAmount));\\n        emit LiquidityRemoved(msg.sender, amount, tokenAmount, ethWithdrawn);\\n        return (ethWithdrawn, tokenAmount);\\n    }\\n}\\n\",\"keccak256\":\"0x5a3ac036d8480dc68a834ce1e97ba6369bb6bf810afa3070c2b0e2347ab6f2c2\",\"license\":\"MIT\"},\"contracts/Lending.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./Corn.sol\\\";\\nimport \\\"./CornDEX.sol\\\";\\n\\ninterface IFlashLoanRecipient{\\n    function executeOperation(uint256 amount, address initiator, address extraParam) external returns (bool);\\n}\\n\\nerror Lending__InvalidAmount();\\nerror Lending__TransferFailed();\\nerror Lending__UnsafePositionRatio();\\nerror Lending__BorrowingFailed();\\nerror Lending__RepayingFailed();\\nerror Lending__PositionSafe();\\nerror Lending__NotLiquidatable();\\nerror Lending__InsufficientLiquidatorCorn();\\nerror Lending__FlashLoanFailed();\\n\\ncontract Lending is Ownable {\\n    uint256 private constant COLLATERAL_RATIO = 120; // 120% collateralization required\\n    uint256 private constant LIQUIDATOR_REWARD = 10; // 10% reward for liquidators\\n\\n    Corn private i_corn;\\n    CornDEX private i_cornDEX;\\n\\n    mapping(address => uint256) public s_userCollateral; // User's collateral balance\\n    mapping(address => uint256) public s_userBorrowed; // User's borrowed corn balance\\n\\n    event CollateralAdded(address indexed user, uint256 indexed amount, uint256 price);\\n    event CollateralWithdrawn(address indexed user, uint256 indexed amount, uint256 price);\\n    event AssetBorrowed(address indexed user, uint256 indexed amount, uint256 price);\\n    event AssetRepaid(address indexed user, uint256 indexed amount, uint256 price);\\n    event Liquidation(\\n        address indexed user,\\n        address indexed liquidator,\\n        uint256 amountForLiquidator,\\n        uint256 liquidatedUserDebt,\\n        uint256 price\\n    );\\n\\n    constructor(address _cornDEX, address _corn) Ownable(msg.sender) {\\n        i_cornDEX = CornDEX(_cornDEX);\\n        i_corn = Corn(_corn);\\n        i_corn.approve(address(this), type(uint256).max);\\n    }\\n\\n    /**\\n     * @notice Allows users to add collateral to their account\\n     */\\n    function addCollateral() public payable {\\n        if (msg.value == 0) {\\n            revert Lending__InvalidAmount();\\n        }\\n        s_userCollateral[msg.sender] += msg.value;\\n        emit CollateralAdded(msg.sender, msg.value, i_cornDEX.currentPrice());\\n    }\\n\\n    /**\\n     * @notice Allows users to withdraw collateral as long as it doesn't make them liquidatable\\n     * @param _amount The amount of collateral to withdraw\\n     */\\n    function withdrawCollateral(uint256 _amount) public {\\n        if (_amount == 0 || s_userCollateral[msg.sender] < _amount) {\\n            revert Lending__InvalidAmount();\\n        }\\n        uint256 newCollateral = s_userCollateral[msg.sender] -= _amount;\\n        s_userCollateral[msg.sender] = newCollateral;\\n        if (s_userBorrowed[msg.sender]!=0){\\n            _validatePosition(msg.sender);\\n        }\\n\\n        (bool success, ) = payable(msg.sender).call{value: _amount}(\\\"\\\");\\n        if (!success) {\\n            revert Lending__TransferFailed();\\n        }\\n        \\n        emit CollateralWithdrawn(msg.sender, _amount, i_cornDEX.currentPrice());\\n    }\\n\\n    /**\\n     * @notice Calculates the total collateral value for a user based on their collateral balance\\n     * @param user The address of the user to calculate the collateral value for\\n     * @return uint256 The collateral value\\n     */\\n    function calculateCollateralValue(address user) public view returns (uint256) {\\n        uint256 currentCollateral = s_userCollateral[user];\\n        return (currentCollateral * i_cornDEX.currentPrice()) / 1e18;\\n    }\\n\\n    /**\\n     * @notice Calculates the position ratio for a user to ensure they are within safe limits\\n     * @param user The address of the user to calculate the position ratio for\\n     * @return uint256 The position ratio\\n     */\\n    function _calculatePositionRatio(address user) internal view returns (uint256) {\\n        uint256 userCollateralinCORN = calculateCollateralValue(user);\\n        uint256 userBorrowed = s_userBorrowed[user];\\n        if (userBorrowed == 0){\\n            return type(uint256).max;\\n        }\\n\\n        return (userCollateralinCORN * 1e18) / userBorrowed;\\n    }\\n\\n    /**\\n     * @notice Checks if a user's position can be liquidated\\n     * @param user The address of the user to check\\n     * @return bool True if the position is liquidatable, false otherwise\\n     */\\n    function isLiquidatable(address user) public view returns (bool) {\\n        //logic given in challenge results in overflow error when value is type(uint256).max and is then *100\\n        if (s_userBorrowed[user] == 0) {\\n            return false;\\n        }\\n        uint256 userpositionratio = _calculatePositionRatio(user);\\n        return (userpositionratio * 100) < (COLLATERAL_RATIO * 1e18);\\n    }\\n\\n    /**\\n     * @notice Internal view method that reverts if a user's position is unsafe\\n     * @param user The address of the user to validate\\n     */\\n    function _validatePosition(address user) internal view {\\n        if(isLiquidatable(user)){\\n            revert Lending__UnsafePositionRatio();\\n        }\\n    }\\n\\n    /**\\n     * @notice Allows users to borrow corn based on their collateral\\n     * @param borrowAmount The amount of corn to borrow\\n     */\\n    function borrowCorn(uint256 borrowAmount) public {\\n        if (borrowAmount == 0){\\n            revert Lending__InvalidAmount();\\n        }\\n        s_userBorrowed[msg.sender]+=borrowAmount;\\n        _validatePosition(msg.sender);\\n\\n        bool success = i_corn.transferFrom(address(this), msg.sender, borrowAmount);\\n        if(!success){\\n            revert Lending__BorrowingFailed();\\n        }\\n        emit AssetBorrowed(msg.sender, borrowAmount, i_cornDEX.currentPrice());\\n    }\\n\\n    /**\\n     * @notice Allows users to repay corn and reduce their debt\\n     * @param repayAmount The amount of corn to repay\\n     */\\n    function repayCorn(uint256 repayAmount) public {\\n        if (repayAmount == 0 || repayAmount > s_userBorrowed[msg.sender]){\\n            revert Lending__InvalidAmount();\\n        }\\n\\n        s_userBorrowed[msg.sender] -= repayAmount;\\n        bool success = i_corn.transferFrom(msg.sender, address(this), repayAmount);\\n        if (!success){\\n            revert Lending__RepayingFailed();\\n        }\\n        emit AssetRepaid(msg.sender, repayAmount, i_cornDEX.currentPrice());\\n    }\\n\\n    /**\\n     * @notice Allows liquidators to liquidate unsafe positions\\n     * @param user The address of the user to liquidate\\n     * @dev The caller must have enough CORN to pay back user's debt\\n     * @dev The caller must have approved this contract to transfer the debt\\n     */\\n    function liquidate(address user) public {\\n\\n        if(!isLiquidatable(user)){\\n            revert Lending__NotLiquidatable();\\n        }\\n\\n        if (i_corn.balanceOf(msg.sender) < s_userBorrowed[user]){\\n            revert Lending__InsufficientLiquidatorCorn();\\n        }\\n\\n        uint256 userBorrowed = s_userBorrowed[user];\\n        uint256 userCollateral = s_userCollateral[user];\\n\\n        // console.log(\\\"liquidate i_corn transferFrom msg.sender:\\\");\\n        // console.logAddress(msg.sender);\\n        i_corn.transferFrom(msg.sender, address(this), userBorrowed);\\n        \\n        \\n       \\n        s_userBorrowed[user] = 0;\\n\\n        uint256 userBorrowedinEth = userBorrowed * 1e18 / i_cornDEX.currentPrice();\\n        uint256 reward = userBorrowedinEth * LIQUIDATOR_REWARD / 100;\\n        uint256 finalreward = userBorrowedinEth + reward;\\n\\n        if (finalreward > userCollateral){\\n            finalreward = userCollateral;\\n        }\\n\\n        s_userCollateral[user] -=finalreward;\\n\\n        (bool success, ) = payable(msg.sender).call{value: finalreward}(\\\"\\\");\\n        if (!success) {\\n            revert Lending__TransferFailed();\\n        }\\n        emit Liquidation(user, msg.sender, finalreward, userBorrowed, i_cornDEX.currentPrice());\\n\\n    }\\n\\n    function flashLoan(IFlashLoanRecipient _recipient, uint256 _amount, address _extraParam) public {\\n        // console.log(\\\"INSIDE FLASHLOAN\\\");\\n        // console.log(\\\"lending corn balance:\\\", i_corn.balanceOf(address(this)));\\n        i_corn.mintTo(address(_recipient), _amount); //pretty sure we have to make the lending contract the CORN owner to do this\\n        // console.log(\\\"AFTER MINTING\\\");\\n        // console.log(\\\"CORN balance:\\\", i_corn.balanceOf(address(_recipient)));\\n        if (!_recipient.executeOperation(_amount, msg.sender, _extraParam)) {\\n            revert Lending__FlashLoanFailed();\\n        }\\n        // console.log(\\\"AFTER EXECUTE OPERATION\\\");\\n        \\n        // I really don't understand the given implementation. I guess it's trusting things to be returned?\\n        // if executeOperation is set to literally just return True, this will just burn the contract's own corn balance.\\n        // i_corn.burnFrom(address(this), i_corn.balanceOf(address(this)));\\n\\n        i_corn.transferFrom(address(_recipient), address(this), _amount);\\n        i_corn.burnFrom(address(this), _amount); //I guess we still use this to not increase the total supply\\n        // console.log(\\\"AFTER BURNING\\\");\\n        // console.log(\\\"Lending corn balance:\\\", i_corn.balanceOf(address(this)));\\n    }\\n\\n    function getMaxBorrowAmount(uint256 _ethAmount) public view returns (uint256) {\\n        uint256 xReserves = address(i_cornDEX).balance;\\n        uint256 yReserves = i_corn.balanceOf(address(i_cornDEX));\\n        uint256 yOutput = i_cornDEX.price(_ethAmount, xReserves, yReserves);\\n        uint256 maxBorrowAmount = (yOutput * 100) / COLLATERAL_RATIO;\\n        return maxBorrowAmount;\\n    }\\n\\n    function getMaxWithdrawableCollateral(address _user) public view returns (uint256) {\\n        uint256 userCollateral = s_userCollateral[_user];\\n        uint256 userBorrowed = s_userBorrowed[_user];\\n\\n        if (userBorrowed ==0 ){\\n            return userCollateral;\\n        }\\n\\n        uint256 minCollateral = (userBorrowed * 1e18 * COLLATERAL_RATIO)  / (i_cornDEX.currentPrice() * 100);\\n\\n        if (userCollateral <= minCollateral ){\\n            return 0;\\n        }\\n        //slight buffer because when you try to withdraw the exact max with potential rounding it causes errors I think\\n        // SRE implementation produces slightly smaller values (97% of what this produces)\\n        // Pretty sure on paper both approaches are mathematically equivalent but I think due to rounding my implementaion value without slight reduction will result in withdrawal errors\\n        return ((userCollateral - minCollateral) * 100 / 101); \\n        \\n    }\\n    // function getMaxWithdrawableCollateral(address user) public view returns (uint256) {\\n    //     uint256 borrowedAmount = s_userBorrowed[user];\\n    //     uint256 userCollateral = s_userCollateral[user];\\n    //     if (borrowedAmount == 0) return userCollateral;\\n\\n    //     uint256 maxBorrowedAmount = getMaxBorrowAmount(userCollateral);\\n    //     if (borrowedAmount == maxBorrowedAmount) return 0;\\n\\n    //     uint256 potentialBorrowingAmount = maxBorrowedAmount - borrowedAmount;\\n    //     uint256 ethValueOfPotentialBorrowingAmount = (potentialBorrowingAmount * 1e18) / i_cornDEX.currentPrice();\\n\\n    //     return (ethValueOfPotentialBorrowingAmount * COLLATERAL_RATIO) / 100;\\n    // }\\n}\",\"keccak256\":\"0x09c3b4604c24c380657d0205d4717a2a72a85072a90fedb018c32ebe9d2271ef\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200165c3803806200165c833981016040819052620000349162000175565b33806200005b57604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b620000668162000108565b50600280546001600160a01b038481166001600160a01b03199283161790925560018054928416929091168217905560405163095ea7b360e01b8152306004820152600019602482015263095ea7b3906044016020604051808303816000875af1158015620000d9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000ff9190620001ad565b505050620001d8565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200017057600080fd5b919050565b600080604083850312156200018957600080fd5b620001948362000158565b9150620001a46020840162000158565b90509250929050565b600060208284031215620001c057600080fd5b81518015158114620001d157600080fd5b9392505050565b61147480620001e86000396000f3fe6080604052600436106100e85760003560e01c8063715018a61161008a578063bd00c24d11610059578063bd00c24d14610264578063d5de45a614610291578063d678598a146102b1578063f2fde38b146102d157600080fd5b8063715018a6146101ff5780638da5cb5b146102145780639210ae641461023c5780639e8169991461025c57600080fd5b80632a5f2c23116100c65780632a5f2c23146101725780632f8655681461019f5780636112fe2e146101bf57806361a4d4ef146101df57600080fd5b806302c25b54146100ed578063042e02cf1461010f5780630835e14514610144575b600080fd5b3480156100f957600080fd5b5061010d6101083660046112ec565b6102f1565b005b34801561011b57600080fd5b5061012f61012a36600461132e565b6104f2565b60405190151581526020015b60405180910390f35b34801561015057600080fd5b5061016461015f36600461132e565b61054c565b60405190815260200161013b565b34801561017e57600080fd5b5061016461018d36600461132e565b60046020526000908152604090205481565b3480156101ab57600080fd5b5061010d6101ba36600461132e565b6105f2565b3480156101cb57600080fd5b5061010d6101da36600461134b565b61098b565b3480156101eb57600080fd5b506101646101fa36600461134b565b610b3c565b34801561020b57600080fd5b5061010d610c5c565b34801561022057600080fd5b506000546040516001600160a01b03909116815260200161013b565b34801561024857600080fd5b5061016461025736600461132e565b610c70565b61010d610d81565b34801561027057600080fd5b5061016461027f36600461132e565b60036020526000908152604090205481565b34801561029d57600080fd5b5061010d6102ac36600461134b565b610e7e565b3480156102bd57600080fd5b5061010d6102cc36600461134b565b61101d565b3480156102dd57600080fd5b5061010d6102ec36600461132e565b611191565b6001546040516308934a5f60e31b81526001600160a01b038581166004830152602482018590529091169063449a52f8906044016020604051808303816000875af1158015610344573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103689190611364565b5060405163542e3d5360e11b8152600481018390523360248201526001600160a01b03828116604483015284169063a85c7aa6906064016020604051808303816000875af11580156103be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e29190611364565b6103ff5760405163101859b960e11b815260040160405180910390fd5b6001546040516323b872dd60e01b81526001600160a01b03909116906323b872dd9061043390869030908790600401611386565b6020604051808303816000875af1158015610452573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104769190611364565b5060015460405163079cc67960e41b8152306004820152602481018490526001600160a01b03909116906379cc6790906044016020604051808303816000875af11580156104c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ec9190611364565b50505050565b6001600160a01b038116600090815260046020526040812054810361051957506000919050565b6000610524836111d4565b90506105396078670de0b6b3a76400006113c0565b6105448260646113c0565b109392505050565b6001600160a01b038082166000908152600360209081526040808320546002548251634e8da32560e11b8152925194959194670de0b6b3a7640000949190921692639d1b464a92600480830193928290030181865afa1580156105b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d791906113dd565b6105e190836113c0565b6105eb91906113f6565b9392505050565b6105fb816104f2565b6106185760405163175ae04960e11b815260040160405180910390fd5b6001600160a01b038181166000908152600460208190526040918290205460015492516370a0823160e01b815233928101929092529291909116906370a0823190602401602060405180830381865afa158015610679573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069d91906113dd565b10156106bc576040516327f93fb360e11b815260040160405180910390fd5b6001600160a01b038082166000908152600460208181526040808420546003909252928390205460015493516323b872dd60e01b81529194909316916323b872dd9161070e9133913091889101611386565b6020604051808303816000875af115801561072d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107519190611364565b506001600160a01b0380841660009081526004602081815260408084208490556002548151634e8da32560e11b8152915194951693639d1b464a9382810193928290030181865afa1580156107aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ce91906113dd565b6107e084670de0b6b3a76400006113c0565b6107ea91906113f6565b9050600060646107fb600a846113c0565b61080591906113f6565b905060006108138284611418565b9050838111156108205750825b6001600160a01b0386166000908152600360205260408120805483929061084890849061142b565b9091555050604051600090339083908381818185875af1925050503d806000811461088f576040519150601f19603f3d011682016040523d82523d6000602084013e610894565b606091505b50509050806108b65760405163a419137f60e01b815260040160405180910390fd5b336001600160a01b0316876001600160a01b03167f5a821a618ddb1a1fd304234a69c9d7f20c129d122fcf35593d13a071926643078489600260009054906101000a90046001600160a01b03166001600160a01b0316639d1b464a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610940573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096491906113dd565b6040805193845260208401929092529082015260600160405180910390a350505050505050565b8015806109a657503360009081526003602052604090205481115b156109c45760405163269cf19b60e11b815260040160405180910390fd5b336000908152600360205260408120805483919083906109e590849061142b565b91829055503360009081526003602090815260408083208490556004909152902054909250159050610a1a57610a1a33611233565b604051600090339084908381818185875af1925050503d8060008114610a5c576040519150601f19603f3d011682016040523d82523d6000602084013e610a61565b606091505b5050905080610a835760405163a419137f60e01b815260040160405180910390fd5b82336001600160a01b03167fdaed309a628faec6cab72194019e2a1a34e890ca9bf9be99788992dd54692819600260009054906101000a90046001600160a01b03166001600160a01b0316639d1b464a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2691906113dd565b60405190815260200160405180910390a3505050565b6002546001546040516370a0823160e01b81526001600160a01b039283166004820181905260009390319284929116906370a0823190602401602060405180830381865afa158015610b92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb691906113dd565b60025460405163081c6a7d60e21b81526004810187905260248101859052604481018390529192506000916001600160a01b0390911690632071a9f490606401602060405180830381865afa158015610c13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3791906113dd565b905060006078610c488360646113c0565b610c5291906113f6565b9695505050505050565b610c6461125a565b610c6e6000611287565b565b6001600160a01b0381166000908152600360209081526040808320546004909252822054808303610ca2575092915050565b60025460408051634e8da32560e11b815290516000926001600160a01b031691639d1b464a9160048083019260209291908290030181865afa158015610cec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d1091906113dd565b610d1b9060646113c0565b6078610d2f84670de0b6b3a76400006113c0565b610d3991906113c0565b610d4391906113f6565b9050808311610d5757506000949350505050565b6065610d63828561142b565b610d6e9060646113c0565b610d7891906113f6565b95945050505050565b34600003610da25760405163269cf19b60e11b815260040160405180910390fd5b3360009081526003602052604081208054349290610dc1908490611418565b9250508190555034336001600160a01b03167f11f8990ac38271f23dea447d5728e9914fca7cea2edda43af6c43c415f8bc30b600260009054906101000a90046001600160a01b03166001600160a01b0316639d1b464a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6b91906113dd565b60405190815260200160405180910390a3565b80600003610e9f5760405163269cf19b60e11b815260040160405180910390fd5b3360009081526004602052604081208054839290610ebe908490611418565b90915550610ecd905033611233565b6001546040516323b872dd60e01b81526000916001600160a01b0316906323b872dd90610f0290309033908790600401611386565b6020604051808303816000875af1158015610f21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f459190611364565b905080610f65576040516325b1478b60e21b815260040160405180910390fd5b81336001600160a01b03167f6c8250ea4d625c09ee567802242f70b37c9dcfdb10a904563781c1ed7663c7cc600260009054906101000a90046001600160a01b03166001600160a01b0316639d1b464a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fe4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100891906113dd565b60405190815260200160405180910390a35050565b80158061103857503360009081526004602052604090205481115b156110565760405163269cf19b60e11b815260040160405180910390fd5b336000908152600460205260408120805483929061107590849061142b565b90915550506001546040516323b872dd60e01b81526000916001600160a01b0316906323b872dd906110af90339030908790600401611386565b6020604051808303816000875af11580156110ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f29190611364565b9050806111125760405163c1cf149f60e01b815260040160405180910390fd5b81336001600160a01b03167fc1afad9537411d7ba4a74e9ee309d18f26f72ee1bfc63647b61e9bca0eec322c600260009054906101000a90046001600160a01b03166001600160a01b0316639d1b464a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fe4573d6000803e3d6000fd5b61119961125a565b6001600160a01b0381166111c857604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b6111d181611287565b50565b6000806111e08361054c565b6001600160a01b03841660009081526004602052604081205491925081900361120e57506000199392505050565b8061122183670de0b6b3a76400006113c0565b61122b91906113f6565b949350505050565b61123c816104f2565b156111d157604051632606396760e21b815260040160405180910390fd5b6000546001600160a01b03163314610c6e5760405163118cdaa760e01b81523360048201526024016111bf565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146111d157600080fd5b60008060006060848603121561130157600080fd5b833561130c816112d7565b9250602084013591506040840135611323816112d7565b809150509250925092565b60006020828403121561134057600080fd5b81356105eb816112d7565b60006020828403121561135d57600080fd5b5035919050565b60006020828403121561137657600080fd5b815180151581146105eb57600080fd5b6001600160a01b039384168152919092166020820152604081019190915260600190565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176113d7576113d76113aa565b92915050565b6000602082840312156113ef57600080fd5b5051919050565b60008261141357634e487b7160e01b600052601260045260246000fd5b500490565b808201808211156113d7576113d76113aa565b818103818111156113d7576113d76113aa56fea26469706673582212204b71820b24a6a0847825616bc76c11ec399c11066939bb8ed1c9e3464ff9624464736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106100e85760003560e01c8063715018a61161008a578063bd00c24d11610059578063bd00c24d14610264578063d5de45a614610291578063d678598a146102b1578063f2fde38b146102d157600080fd5b8063715018a6146101ff5780638da5cb5b146102145780639210ae641461023c5780639e8169991461025c57600080fd5b80632a5f2c23116100c65780632a5f2c23146101725780632f8655681461019f5780636112fe2e146101bf57806361a4d4ef146101df57600080fd5b806302c25b54146100ed578063042e02cf1461010f5780630835e14514610144575b600080fd5b3480156100f957600080fd5b5061010d6101083660046112ec565b6102f1565b005b34801561011b57600080fd5b5061012f61012a36600461132e565b6104f2565b60405190151581526020015b60405180910390f35b34801561015057600080fd5b5061016461015f36600461132e565b61054c565b60405190815260200161013b565b34801561017e57600080fd5b5061016461018d36600461132e565b60046020526000908152604090205481565b3480156101ab57600080fd5b5061010d6101ba36600461132e565b6105f2565b3480156101cb57600080fd5b5061010d6101da36600461134b565b61098b565b3480156101eb57600080fd5b506101646101fa36600461134b565b610b3c565b34801561020b57600080fd5b5061010d610c5c565b34801561022057600080fd5b506000546040516001600160a01b03909116815260200161013b565b34801561024857600080fd5b5061016461025736600461132e565b610c70565b61010d610d81565b34801561027057600080fd5b5061016461027f36600461132e565b60036020526000908152604090205481565b34801561029d57600080fd5b5061010d6102ac36600461134b565b610e7e565b3480156102bd57600080fd5b5061010d6102cc36600461134b565b61101d565b3480156102dd57600080fd5b5061010d6102ec36600461132e565b611191565b6001546040516308934a5f60e31b81526001600160a01b038581166004830152602482018590529091169063449a52f8906044016020604051808303816000875af1158015610344573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103689190611364565b5060405163542e3d5360e11b8152600481018390523360248201526001600160a01b03828116604483015284169063a85c7aa6906064016020604051808303816000875af11580156103be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e29190611364565b6103ff5760405163101859b960e11b815260040160405180910390fd5b6001546040516323b872dd60e01b81526001600160a01b03909116906323b872dd9061043390869030908790600401611386565b6020604051808303816000875af1158015610452573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104769190611364565b5060015460405163079cc67960e41b8152306004820152602481018490526001600160a01b03909116906379cc6790906044016020604051808303816000875af11580156104c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ec9190611364565b50505050565b6001600160a01b038116600090815260046020526040812054810361051957506000919050565b6000610524836111d4565b90506105396078670de0b6b3a76400006113c0565b6105448260646113c0565b109392505050565b6001600160a01b038082166000908152600360209081526040808320546002548251634e8da32560e11b8152925194959194670de0b6b3a7640000949190921692639d1b464a92600480830193928290030181865afa1580156105b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d791906113dd565b6105e190836113c0565b6105eb91906113f6565b9392505050565b6105fb816104f2565b6106185760405163175ae04960e11b815260040160405180910390fd5b6001600160a01b038181166000908152600460208190526040918290205460015492516370a0823160e01b815233928101929092529291909116906370a0823190602401602060405180830381865afa158015610679573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069d91906113dd565b10156106bc576040516327f93fb360e11b815260040160405180910390fd5b6001600160a01b038082166000908152600460208181526040808420546003909252928390205460015493516323b872dd60e01b81529194909316916323b872dd9161070e9133913091889101611386565b6020604051808303816000875af115801561072d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107519190611364565b506001600160a01b0380841660009081526004602081815260408084208490556002548151634e8da32560e11b8152915194951693639d1b464a9382810193928290030181865afa1580156107aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ce91906113dd565b6107e084670de0b6b3a76400006113c0565b6107ea91906113f6565b9050600060646107fb600a846113c0565b61080591906113f6565b905060006108138284611418565b9050838111156108205750825b6001600160a01b0386166000908152600360205260408120805483929061084890849061142b565b9091555050604051600090339083908381818185875af1925050503d806000811461088f576040519150601f19603f3d011682016040523d82523d6000602084013e610894565b606091505b50509050806108b65760405163a419137f60e01b815260040160405180910390fd5b336001600160a01b0316876001600160a01b03167f5a821a618ddb1a1fd304234a69c9d7f20c129d122fcf35593d13a071926643078489600260009054906101000a90046001600160a01b03166001600160a01b0316639d1b464a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610940573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096491906113dd565b6040805193845260208401929092529082015260600160405180910390a350505050505050565b8015806109a657503360009081526003602052604090205481115b156109c45760405163269cf19b60e11b815260040160405180910390fd5b336000908152600360205260408120805483919083906109e590849061142b565b91829055503360009081526003602090815260408083208490556004909152902054909250159050610a1a57610a1a33611233565b604051600090339084908381818185875af1925050503d8060008114610a5c576040519150601f19603f3d011682016040523d82523d6000602084013e610a61565b606091505b5050905080610a835760405163a419137f60e01b815260040160405180910390fd5b82336001600160a01b03167fdaed309a628faec6cab72194019e2a1a34e890ca9bf9be99788992dd54692819600260009054906101000a90046001600160a01b03166001600160a01b0316639d1b464a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2691906113dd565b60405190815260200160405180910390a3505050565b6002546001546040516370a0823160e01b81526001600160a01b039283166004820181905260009390319284929116906370a0823190602401602060405180830381865afa158015610b92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb691906113dd565b60025460405163081c6a7d60e21b81526004810187905260248101859052604481018390529192506000916001600160a01b0390911690632071a9f490606401602060405180830381865afa158015610c13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3791906113dd565b905060006078610c488360646113c0565b610c5291906113f6565b9695505050505050565b610c6461125a565b610c6e6000611287565b565b6001600160a01b0381166000908152600360209081526040808320546004909252822054808303610ca2575092915050565b60025460408051634e8da32560e11b815290516000926001600160a01b031691639d1b464a9160048083019260209291908290030181865afa158015610cec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d1091906113dd565b610d1b9060646113c0565b6078610d2f84670de0b6b3a76400006113c0565b610d3991906113c0565b610d4391906113f6565b9050808311610d5757506000949350505050565b6065610d63828561142b565b610d6e9060646113c0565b610d7891906113f6565b95945050505050565b34600003610da25760405163269cf19b60e11b815260040160405180910390fd5b3360009081526003602052604081208054349290610dc1908490611418565b9250508190555034336001600160a01b03167f11f8990ac38271f23dea447d5728e9914fca7cea2edda43af6c43c415f8bc30b600260009054906101000a90046001600160a01b03166001600160a01b0316639d1b464a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6b91906113dd565b60405190815260200160405180910390a3565b80600003610e9f5760405163269cf19b60e11b815260040160405180910390fd5b3360009081526004602052604081208054839290610ebe908490611418565b90915550610ecd905033611233565b6001546040516323b872dd60e01b81526000916001600160a01b0316906323b872dd90610f0290309033908790600401611386565b6020604051808303816000875af1158015610f21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f459190611364565b905080610f65576040516325b1478b60e21b815260040160405180910390fd5b81336001600160a01b03167f6c8250ea4d625c09ee567802242f70b37c9dcfdb10a904563781c1ed7663c7cc600260009054906101000a90046001600160a01b03166001600160a01b0316639d1b464a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fe4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100891906113dd565b60405190815260200160405180910390a35050565b80158061103857503360009081526004602052604090205481115b156110565760405163269cf19b60e11b815260040160405180910390fd5b336000908152600460205260408120805483929061107590849061142b565b90915550506001546040516323b872dd60e01b81526000916001600160a01b0316906323b872dd906110af90339030908790600401611386565b6020604051808303816000875af11580156110ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f29190611364565b9050806111125760405163c1cf149f60e01b815260040160405180910390fd5b81336001600160a01b03167fc1afad9537411d7ba4a74e9ee309d18f26f72ee1bfc63647b61e9bca0eec322c600260009054906101000a90046001600160a01b03166001600160a01b0316639d1b464a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fe4573d6000803e3d6000fd5b61119961125a565b6001600160a01b0381166111c857604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b6111d181611287565b50565b6000806111e08361054c565b6001600160a01b03841660009081526004602052604081205491925081900361120e57506000199392505050565b8061122183670de0b6b3a76400006113c0565b61122b91906113f6565b949350505050565b61123c816104f2565b156111d157604051632606396760e21b815260040160405180910390fd5b6000546001600160a01b03163314610c6e5760405163118cdaa760e01b81523360048201526024016111bf565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146111d157600080fd5b60008060006060848603121561130157600080fd5b833561130c816112d7565b9250602084013591506040840135611323816112d7565b809150509250925092565b60006020828403121561134057600080fd5b81356105eb816112d7565b60006020828403121561135d57600080fd5b5035919050565b60006020828403121561137657600080fd5b815180151581146105eb57600080fd5b6001600160a01b039384168152919092166020820152604081019190915260600190565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176113d7576113d76113aa565b92915050565b6000602082840312156113ef57600080fd5b5051919050565b60008261141357634e487b7160e01b600052601260045260246000fd5b500490565b808201808211156113d7576113d76113aa565b818103818111156113d7576113d76113aa56fea26469706673582212204b71820b24a6a0847825616bc76c11ec399c11066939bb8ed1c9e3464ff9624464736f6c63430008140033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "borrowCorn(uint256)": {
        "params": {
          "borrowAmount": "The amount of corn to borrow"
        }
      },
      "calculateCollateralValue(address)": {
        "params": {
          "user": "The address of the user to calculate the collateral value for"
        },
        "returns": {
          "_0": "uint256 The collateral value"
        }
      },
      "isLiquidatable(address)": {
        "params": {
          "user": "The address of the user to check"
        },
        "returns": {
          "_0": "bool True if the position is liquidatable, false otherwise"
        }
      },
      "liquidate(address)": {
        "details": "The caller must have enough CORN to pay back user's debtThe caller must have approved this contract to transfer the debt",
        "params": {
          "user": "The address of the user to liquidate"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "repayCorn(uint256)": {
        "params": {
          "repayAmount": "The amount of corn to repay"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawCollateral(uint256)": {
        "params": {
          "_amount": "The amount of collateral to withdraw"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addCollateral()": {
        "notice": "Allows users to add collateral to their account"
      },
      "borrowCorn(uint256)": {
        "notice": "Allows users to borrow corn based on their collateral"
      },
      "calculateCollateralValue(address)": {
        "notice": "Calculates the total collateral value for a user based on their collateral balance"
      },
      "isLiquidatable(address)": {
        "notice": "Checks if a user's position can be liquidated"
      },
      "liquidate(address)": {
        "notice": "Allows liquidators to liquidate unsafe positions"
      },
      "repayCorn(uint256)": {
        "notice": "Allows users to repay corn and reduce their debt"
      },
      "withdrawCollateral(uint256)": {
        "notice": "Allows users to withdraw collateral as long as it doesn't make them liquidatable"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/Lending.sol:Lending",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1892,
        "contract": "contracts/Lending.sol:Lending",
        "label": "i_corn",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(Corn)1041"
      },
      {
        "astId": 1895,
        "contract": "contracts/Lending.sol:Lending",
        "label": "i_cornDEX",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(CornDEX)1693"
      },
      {
        "astId": 1899,
        "contract": "contracts/Lending.sol:Lending",
        "label": "s_userCollateral",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1903,
        "contract": "contracts/Lending.sol:Lending",
        "label": "s_userBorrowed",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(Corn)1041": {
        "encoding": "inplace",
        "label": "contract Corn",
        "numberOfBytes": "20"
      },
      "t_contract(CornDEX)1693": {
        "encoding": "inplace",
        "label": "contract CornDEX",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}