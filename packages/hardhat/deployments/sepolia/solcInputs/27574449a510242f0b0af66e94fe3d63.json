{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/Corn.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nerror Corn__InvalidAmount();\nerror Corn__InsufficientBalance();\nerror Corn__InsufficientAllowance();\nerror Corn__InvalidAddress();\n\ncontract Corn is ERC20, Ownable {\n    constructor() ERC20(\"CORN\", \"CORN\") Ownable(msg.sender) {}\n\n    function burnFrom(address account, uint256 amount) external onlyOwner returns (bool) {\n        uint256 balance = balanceOf(account);\n        if (amount == 0) {\n            revert Corn__InvalidAmount();\n        }\n        if (balance < amount) {\n            revert Corn__InsufficientBalance();\n        }\n        _burn(account, amount);\n        return true;\n    }\n\n    function mintTo(address to, uint256 amount) external onlyOwner returns (bool) {\n        if (to == address(0)) {\n            revert Corn__InvalidAddress();\n        }\n        if (amount == 0) {\n            revert Corn__InvalidAmount();\n        }\n        _mint(to, amount);\n        return true;\n    }\n}\n"
    },
    "contracts/CornDEX.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/**\n * @notice Simple DEX contract that allows users to swap ETH for CORN and CORN for ETH\n */\ncontract CornDEX {\n    /* ========== GLOBAL VARIABLES ========== */\n\n    IERC20 token; //instantiates the imported contract\n    uint256 public totalLiquidity;\n    mapping(address => uint256) public liquidity;\n\n    /* ========== EVENTS ========== */\n\n    event Swap(address swapper, address inputToken, uint256 inputAmount, address outputToken, uint256 outputAmount);\n    event PriceUpdated(uint256 price);\n    /**\n     * @notice Emitted when liquidity provided to DEX and mints LPTs.\n     */\n    event LiquidityProvided(address liquidityProvider, uint256 liquidityMinted, uint256 ethInput, uint256 tokensInput);\n\n    /**\n     * @notice Emitted when liquidity removed from DEX and decreases LPT count within DEX.\n     */\n    event LiquidityRemoved(\n        address liquidityRemover,\n        uint256 liquidityWithdrawn,\n        uint256 tokensOutput,\n        uint256 ethOutput\n    );\n\n    /* ========== CONSTRUCTOR ========== */\n\n    constructor(address tokenAddr) {\n        token = IERC20(tokenAddr); //specifies the token address that will hook into the interface and be used through the variable 'token'\n    }\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n\n    /**\n     * @notice initializes amount of tokens that will be transferred to the DEX itself from the erc20 contract. Loads contract up with both ETH and CORN.\n     * @param tokens amount to be transferred to DEX\n     * @return totalLiquidity is the number of LPTs minting as a result of deposits made to DEX contract\n     * NOTE: since ratio is 1:1, this is fine to initialize the totalLiquidity as equal to eth balance of contract.\n     */\n    function init(uint256 tokens) public payable returns (uint256) {\n        require(totalLiquidity == 0, \"DEX: init - already has liquidity\");\n        totalLiquidity = address(this).balance;\n        liquidity[msg.sender] = totalLiquidity;\n        require(token.transferFrom(msg.sender, address(this), tokens), \"DEX: init - transfer did not transact\");\n        return totalLiquidity;\n    }\n\n    /**\n     * @notice returns the amount you should receive (yOutput) when given the reserves of both assets in the pool\n     */\n    function price(uint256 xInput, uint256 xReserves, uint256 yReserves) public pure returns (uint256 yOutput) {\n        uint256 numerator = xInput * yReserves;\n        uint256 denominator = (xReserves) + xInput;\n        return (numerator / denominator);\n    }\n\n    /**\n     * @notice returns the current price of ETH in CORN\n     */\n    function currentPrice() public view returns (uint256 _currentPrice) {\n        _currentPrice = price(1 ether, address(this).balance, token.balanceOf(address(this)));\n    }\n\n    /**\n     * @notice returns the amount you need to put in (xInput) when given the amount of yOutput you want along with the reserves of both assets in the pool\n     */\n    function calculateXInput(\n        uint256 yOutput,\n        uint256 xReserves,\n        uint256 yReserves\n    ) public pure returns (uint256 xInput) {\n        uint256 numerator = yOutput * xReserves;\n        uint256 denominator = yReserves - yOutput;\n\n        return (numerator / denominator) + 1;\n    }\n\n    /**\n     * @notice sends Ether to DEX in exchange for $CORN\n     */\n    function ethToToken() internal returns (uint256 tokenOutput) {\n        require(msg.value > 0, \"cannot swap 0 ETH\");\n        uint256 ethReserve = address(this).balance - msg.value;\n        uint256 tokenReserve = token.balanceOf(address(this));\n        tokenOutput = price(msg.value, ethReserve, tokenReserve);\n\n        require(token.transfer(msg.sender, tokenOutput), \"ethToToken(): reverted swap.\");\n        emit Swap(msg.sender, address(0), msg.value, address(token), tokenOutput);\n        return tokenOutput;\n    }\n\n    /**\n     * @notice sends $CORN tokens to DEX in exchange for Ether\n     */\n    function tokenToEth(uint256 tokenInput) internal returns (uint256 ethOutput) {\n        require(tokenInput > 0, \"cannot swap 0 tokens\");\n        require(token.balanceOf(msg.sender) >= tokenInput, \"insufficient token balance\");\n        require(token.allowance(msg.sender, address(this)) >= tokenInput, \"insufficient allowance\");\n        uint256 tokenReserve = token.balanceOf(address(this));\n        ethOutput = price(tokenInput, tokenReserve, address(this).balance);\n        require(token.transferFrom(msg.sender, address(this), tokenInput), \"tokenToEth(): reverted swap.\");\n        (bool sent, ) = msg.sender.call{ value: ethOutput }(\"\");\n        require(sent, \"tokenToEth: revert in transferring eth to you!\");\n        emit Swap(msg.sender, address(token), tokenInput, address(0), ethOutput);\n        return ethOutput;\n    }\n\n    /**\n     * @notice allows users to swap ETH for $CORN or $CORN for ETH with a single method\n     */\n    function swap(uint256 inputAmount) public payable returns (uint256 outputAmount) {\n        if (msg.value > 0 && inputAmount == msg.value) {\n            outputAmount = ethToToken();\n        } else {\n            outputAmount = tokenToEth(inputAmount);\n        }\n        emit PriceUpdated(currentPrice());\n    }\n\n    /**\n     * @notice allows deposits of $CORN and $ETH to liquidity pool\n     * NOTE: parameter is the msg.value sent with this function call. That amount is used to determine the amount of $CORN needed as well and taken from the depositor.\n     * NOTE: user has to make sure to give DEX approval to spend their tokens on their behalf by calling approve function prior to this function call.\n     * NOTE: Equal parts of both assets will be removed from the user's wallet with respect to the price outlined by the AMM.\n     */\n    function deposit() public payable returns (uint256 tokensDeposited) {\n        require(msg.value > 0, \"Must send value when depositing\");\n        uint256 ethReserve = address(this).balance - msg.value;\n        uint256 tokenReserve = token.balanceOf(address(this));\n        uint256 tokenDeposit;\n\n        tokenDeposit = ((msg.value * tokenReserve) / ethReserve) + 1;\n\n        require(token.balanceOf(msg.sender) >= tokenDeposit, \"insufficient token balance\");\n        require(token.allowance(msg.sender, address(this)) >= tokenDeposit, \"insufficient allowance\");\n\n        uint256 liquidityMinted = (msg.value * totalLiquidity) / ethReserve;\n        liquidity[msg.sender] += liquidityMinted;\n        totalLiquidity += liquidityMinted;\n\n        require(token.transferFrom(msg.sender, address(this), tokenDeposit));\n        emit LiquidityProvided(msg.sender, liquidityMinted, msg.value, tokenDeposit);\n        return tokenDeposit;\n    }\n\n    /**\n     * @notice allows withdrawal of $CORN and $ETH from liquidity pool\n     * NOTE: with this current code, the msg caller could end up getting very little back if the liquidity is super low in the pool. I guess they could see that with the UI.\n     */\n    function withdraw(uint256 amount) public returns (uint256 ethAmount, uint256 tokenAmount) {\n        require(liquidity[msg.sender] >= amount, \"withdraw: sender does not have enough liquidity to withdraw.\");\n        uint256 ethReserve = address(this).balance;\n        uint256 tokenReserve = token.balanceOf(address(this));\n        uint256 ethWithdrawn;\n\n        ethWithdrawn = (amount * ethReserve) / totalLiquidity;\n\n        tokenAmount = (amount * tokenReserve) / totalLiquidity;\n        liquidity[msg.sender] -= amount;\n        totalLiquidity -= amount;\n        (bool sent, ) = payable(msg.sender).call{ value: ethWithdrawn }(\"\");\n        require(sent, \"withdraw(): revert in transferring eth to you!\");\n        require(token.transfer(msg.sender, tokenAmount));\n        emit LiquidityRemoved(msg.sender, amount, tokenAmount, ethWithdrawn);\n        return (ethWithdrawn, tokenAmount);\n    }\n}\n"
    },
    "contracts/Lending.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./Corn.sol\";\nimport \"./CornDEX.sol\";\n\ninterface IFlashLoanRecipient{\n    function executeOperation(uint256 amount, address initiator, address extraParam) external returns (bool);\n}\n\nerror Lending__InvalidAmount();\nerror Lending__TransferFailed();\nerror Lending__UnsafePositionRatio();\nerror Lending__BorrowingFailed();\nerror Lending__RepayingFailed();\nerror Lending__PositionSafe();\nerror Lending__NotLiquidatable();\nerror Lending__InsufficientLiquidatorCorn();\nerror Lending__FlashLoanFailed();\n\ncontract Lending is Ownable {\n    uint256 private constant COLLATERAL_RATIO = 120; // 120% collateralization required\n    uint256 private constant LIQUIDATOR_REWARD = 10; // 10% reward for liquidators\n\n    Corn private i_corn;\n    CornDEX private i_cornDEX;\n\n    mapping(address => uint256) public s_userCollateral; // User's collateral balance\n    mapping(address => uint256) public s_userBorrowed; // User's borrowed corn balance\n\n    event CollateralAdded(address indexed user, uint256 indexed amount, uint256 price);\n    event CollateralWithdrawn(address indexed user, uint256 indexed amount, uint256 price);\n    event AssetBorrowed(address indexed user, uint256 indexed amount, uint256 price);\n    event AssetRepaid(address indexed user, uint256 indexed amount, uint256 price);\n    event Liquidation(\n        address indexed user,\n        address indexed liquidator,\n        uint256 amountForLiquidator,\n        uint256 liquidatedUserDebt,\n        uint256 price\n    );\n\n    constructor(address _cornDEX, address _corn) Ownable(msg.sender) {\n        i_cornDEX = CornDEX(_cornDEX);\n        i_corn = Corn(_corn);\n        i_corn.approve(address(this), type(uint256).max);\n    }\n\n    /**\n     * @notice Allows users to add collateral to their account\n     */\n    function addCollateral() public payable {\n        if (msg.value == 0) {\n            revert Lending__InvalidAmount();\n        }\n        s_userCollateral[msg.sender] += msg.value;\n        emit CollateralAdded(msg.sender, msg.value, i_cornDEX.currentPrice());\n    }\n\n    /**\n     * @notice Allows users to withdraw collateral as long as it doesn't make them liquidatable\n     * @param _amount The amount of collateral to withdraw\n     */\n    function withdrawCollateral(uint256 _amount) public {\n        if (_amount == 0 || s_userCollateral[msg.sender] < _amount) {\n            revert Lending__InvalidAmount();\n        }\n        uint256 newCollateral = s_userCollateral[msg.sender] -= _amount;\n        s_userCollateral[msg.sender] = newCollateral;\n        if (s_userBorrowed[msg.sender]!=0){\n            _validatePosition(msg.sender);\n        }\n\n        (bool success, ) = payable(msg.sender).call{value: _amount}(\"\");\n        if (!success) {\n            revert Lending__TransferFailed();\n        }\n        \n        emit CollateralWithdrawn(msg.sender, _amount, i_cornDEX.currentPrice());\n    }\n\n    /**\n     * @notice Calculates the total collateral value for a user based on their collateral balance\n     * @param user The address of the user to calculate the collateral value for\n     * @return uint256 The collateral value\n     */\n    function calculateCollateralValue(address user) public view returns (uint256) {\n        uint256 currentCollateral = s_userCollateral[user];\n        return (currentCollateral * i_cornDEX.currentPrice()) / 1e18;\n    }\n\n    /**\n     * @notice Calculates the position ratio for a user to ensure they are within safe limits\n     * @param user The address of the user to calculate the position ratio for\n     * @return uint256 The position ratio\n     */\n    function _calculatePositionRatio(address user) internal view returns (uint256) {\n        uint256 userCollateralinCORN = calculateCollateralValue(user);\n        uint256 userBorrowed = s_userBorrowed[user];\n        if (userBorrowed == 0){\n            return type(uint256).max;\n        }\n\n        return (userCollateralinCORN * 1e18) / userBorrowed;\n    }\n\n    /**\n     * @notice Checks if a user's position can be liquidated\n     * @param user The address of the user to check\n     * @return bool True if the position is liquidatable, false otherwise\n     */\n    function isLiquidatable(address user) public view returns (bool) {\n        //logic given in challenge results in overflow error when value is type(uint256).max and is then *100\n        if (s_userBorrowed[user] == 0) {\n            return false;\n        }\n        uint256 userpositionratio = _calculatePositionRatio(user);\n        return (userpositionratio * 100) < (COLLATERAL_RATIO * 1e18);\n    }\n\n    /**\n     * @notice Internal view method that reverts if a user's position is unsafe\n     * @param user The address of the user to validate\n     */\n    function _validatePosition(address user) internal view {\n        if(isLiquidatable(user)){\n            revert Lending__UnsafePositionRatio();\n        }\n    }\n\n    /**\n     * @notice Allows users to borrow corn based on their collateral\n     * @param borrowAmount The amount of corn to borrow\n     */\n    function borrowCorn(uint256 borrowAmount) public {\n        if (borrowAmount == 0){\n            revert Lending__InvalidAmount();\n        }\n        s_userBorrowed[msg.sender]+=borrowAmount;\n        _validatePosition(msg.sender);\n\n        bool success = i_corn.transferFrom(address(this), msg.sender, borrowAmount);\n        if(!success){\n            revert Lending__BorrowingFailed();\n        }\n        emit AssetBorrowed(msg.sender, borrowAmount, i_cornDEX.currentPrice());\n    }\n\n    /**\n     * @notice Allows users to repay corn and reduce their debt\n     * @param repayAmount The amount of corn to repay\n     */\n    function repayCorn(uint256 repayAmount) public {\n        if (repayAmount == 0 || repayAmount > s_userBorrowed[msg.sender]){\n            revert Lending__InvalidAmount();\n        }\n\n        s_userBorrowed[msg.sender] -= repayAmount;\n        bool success = i_corn.transferFrom(msg.sender, address(this), repayAmount);\n        if (!success){\n            revert Lending__RepayingFailed();\n        }\n        emit AssetRepaid(msg.sender, repayAmount, i_cornDEX.currentPrice());\n    }\n\n    /**\n     * @notice Allows liquidators to liquidate unsafe positions\n     * @param user The address of the user to liquidate\n     * @dev The caller must have enough CORN to pay back user's debt\n     * @dev The caller must have approved this contract to transfer the debt\n     */\n    function liquidate(address user) public {\n\n        if(!isLiquidatable(user)){\n            revert Lending__NotLiquidatable();\n        }\n\n        if (i_corn.balanceOf(msg.sender) < s_userBorrowed[user]){\n            revert Lending__InsufficientLiquidatorCorn();\n        }\n\n        uint256 userBorrowed = s_userBorrowed[user];\n        uint256 userCollateral = s_userCollateral[user];\n\n        // console.log(\"liquidate i_corn transferFrom msg.sender:\");\n        // console.logAddress(msg.sender);\n        i_corn.transferFrom(msg.sender, address(this), userBorrowed);\n        \n        \n       \n        s_userBorrowed[user] = 0;\n\n        uint256 userBorrowedinEth = userBorrowed * 1e18 / i_cornDEX.currentPrice();\n        uint256 reward = userBorrowedinEth * LIQUIDATOR_REWARD / 100;\n        uint256 finalreward = userBorrowedinEth + reward;\n\n        if (finalreward > userCollateral){\n            finalreward = userCollateral;\n        }\n\n        s_userCollateral[user] -=finalreward;\n\n        (bool success, ) = payable(msg.sender).call{value: finalreward}(\"\");\n        if (!success) {\n            revert Lending__TransferFailed();\n        }\n        emit Liquidation(user, msg.sender, finalreward, userBorrowed, i_cornDEX.currentPrice());\n\n    }\n\n    function flashLoan(IFlashLoanRecipient _recipient, uint256 _amount, address _extraParam) public {\n        // console.log(\"INSIDE FLASHLOAN\");\n        // console.log(\"lending corn balance:\", i_corn.balanceOf(address(this)));\n        i_corn.mintTo(address(_recipient), _amount); //pretty sure we have to make the lending contract the CORN owner to do this\n        // console.log(\"AFTER MINTING\");\n        // console.log(\"CORN balance:\", i_corn.balanceOf(address(_recipient)));\n        if (!_recipient.executeOperation(_amount, msg.sender, _extraParam)) {\n            revert Lending__FlashLoanFailed();\n        }\n        // console.log(\"AFTER EXECUTE OPERATION\");\n        \n        // I really don't understand the given implementation. I guess it's trusting things to be returned?\n        // if executeOperation is set to literally just return True, this will just burn the contract's own corn balance.\n        // i_corn.burnFrom(address(this), i_corn.balanceOf(address(this)));\n\n        i_corn.transferFrom(address(_recipient), address(this), _amount);\n        i_corn.burnFrom(address(this), _amount); //I guess we still use this to not increase the total supply\n        // console.log(\"AFTER BURNING\");\n        // console.log(\"Lending corn balance:\", i_corn.balanceOf(address(this)));\n    }\n\n    function getMaxBorrowAmount(uint256 _ethAmount) public view returns (uint256) {\n        uint256 xReserves = address(i_cornDEX).balance;\n        uint256 yReserves = i_corn.balanceOf(address(i_cornDEX));\n        uint256 yOutput = i_cornDEX.price(_ethAmount, xReserves, yReserves);\n        uint256 maxBorrowAmount = (yOutput * 100) / COLLATERAL_RATIO;\n        return maxBorrowAmount;\n    }\n\n    function getMaxWithdrawableCollateral(address _user) public view returns (uint256) {\n        uint256 userCollateral = s_userCollateral[_user];\n        uint256 userBorrowed = s_userBorrowed[_user];\n\n        if (userBorrowed ==0 ){\n            return userCollateral;\n        }\n\n        uint256 minCollateral = (userBorrowed * 1e18 * COLLATERAL_RATIO)  / (i_cornDEX.currentPrice() * 100);\n\n        if (userCollateral <= minCollateral ){\n            return 0;\n        }\n        //slight buffer because when you try to withdraw the exact max with potential rounding it causes errors I think\n        // SRE implementation produces slightly smaller values (97% of what this produces)\n        // Pretty sure on paper both approaches are mathematically equivalent but I think due to rounding my implementaion value without slight reduction will result in withdrawal errors\n        return ((userCollateral - minCollateral) * 100 / 101); \n        \n    }\n    // function getMaxWithdrawableCollateral(address user) public view returns (uint256) {\n    //     uint256 borrowedAmount = s_userBorrowed[user];\n    //     uint256 userCollateral = s_userCollateral[user];\n    //     if (borrowedAmount == 0) return userCollateral;\n\n    //     uint256 maxBorrowedAmount = getMaxBorrowAmount(userCollateral);\n    //     if (borrowedAmount == maxBorrowedAmount) return 0;\n\n    //     uint256 potentialBorrowingAmount = maxBorrowedAmount - borrowedAmount;\n    //     uint256 ethValueOfPotentialBorrowingAmount = (potentialBorrowingAmount * 1e18) / i_cornDEX.currentPrice();\n\n    //     return (ethValueOfPotentialBorrowingAmount * COLLATERAL_RATIO) / 100;\n    // }\n}\n\n// import \"hardhat/console.sol\";\nimport \"./Lending.sol\";\n\ncontract FlashLoanLiquidator {\n    Corn i_corn;\n    CornDEX i_cornDEX;\n    Lending i_lending;\n\n    constructor(address _cornDEX, address _corn, address _lending) {\n        i_cornDEX = CornDEX(_cornDEX);\n        i_corn = Corn(_corn);\n        i_lending = Lending(_lending);\n        i_corn.approve(address(this), type(uint256).max);\n        i_corn.approve(address(i_lending), type(uint256).max);\n    }\n\n    function executeOperation(uint256 _amount, address _initiator, address _extraParam) external returns (bool) {\n        // console.log('before liquidate balance:', i_corn.balanceOf(address(this)));\n        // i_corn.approve(address(i_lending), _amount);\n        i_lending.liquidate(_extraParam);\n        // console.log('after liquidate balance:', i_corn.balanceOf(address(this)));\n        // console.log(\"actual ETH balance:\", address(this).balance);\n\n        uint256 xReserves = address(i_cornDEX).balance;\n        uint256 yReserves = i_corn.balanceOf(address(i_cornDEX));\n        uint256 Ethneeded = i_cornDEX.calculateXInput(_amount, xReserves, yReserves);\n\n        i_cornDEX.swap{value: Ethneeded}(Ethneeded);\n        // console.log(\"after swap CORN balance:\", i_corn.balanceOf(address(this)));\n        // console.log(\"after swap ETH balance:\", address(this).balance);\n\n        // i_corn.transfer(msg.sender, i_corn.balanceOf(address(this)) - _amount);\n        // console.log(\"iniitiator:\");\n        // console.logAddress(_initiator);\n\n        // (bool success, ) = payable(_initiator).call{value: address(this).balance}(\"\");\n        // if (!success) {\n        //     revert Lending__TransferFailed();\n        // }\n\n        // you what maybe im not so smart, the initial initiater/msg.sender is no longer my wallet but the contract itself\n        // so I guess I'd have to either call flashloan myself and and implment the final payable transfer or i can just implement\n        // a seperate withdraw function and do the whole Ownable thing\n\n        return true;\n    }\n\n    //SRE given workflow weirdly manual and annoying to do. Just do it here idk y not\n    function liquidate( address user) external {\n        uint256 _amount = i_lending.s_userBorrowed(user);\n        // console.log(\"balance before flashloan:\", i_corn.balanceOf(address(this)));\n        // console.log(\"amount:\", _amount);\n        i_lending.flashLoan(IFlashLoanRecipient(address(this)), _amount, user);\n        // console.log(\"balance after flashloan:\", i_corn.balanceOf(address(this)));\n    }\n\n    receive() external payable {}\n}"
    },
    "contracts/Leverage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport { Lending } from \"./Lending.sol\";\nimport { CornDEX } from \"./CornDEX.sol\";\nimport { Corn } from \"./Corn.sol\";\n// import \"hardhat/console.sol\";\n\n/**\n * @notice For Side quest only\n * @notice This contract is used to leverage a user's position by borrowing CORN from the Lending contract\n * then borrowing more CORN from the DEX to repay the initial borrow then repeating until the user has borrowed as much as they want\n */\ncontract Leverage {\n    Lending i_lending;\n    CornDEX i_cornDEX;\n    Corn i_corn;\n    address public owner;\n\n    event LeveragedPositionOpened(address user, uint256 loops);\n    event LeveragedPositionClosed(address user, uint256 loops);\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Only the owner can call this function\");\n        _;\n    }\n\n    constructor(address _lending, address _cornDEX, address _corn) {\n        i_lending = Lending(_lending);\n        i_cornDEX = CornDEX(_cornDEX);\n        i_corn = Corn(_corn);\n        // Approve the DEX to spend the user's CORN\n        i_corn.approve(address(i_cornDEX), type(uint256).max);\n        i_corn.approve(address(i_lending), type(uint256).max);\n    }\n    \n    /**\n     * @notice Claim ownership of the contract so that no one else can change your position or withdraw your funds\n     */\n    function claimOwnership() public {\n        owner = msg.sender;\n    }\n\n    /**\n     * @notice Open a leveraged position, iteratively borrowing CORN, swapping it for ETH, and adding it as collateral\n     * @param reserve The amount of ETH that we will keep in the contract as a reserve to prevent liquidation\n     */\n    function openLeveragedPosition(uint256 reserve) public payable onlyOwner {\n        uint256 loops = 0;\n        uint256 MIN_AMOUNT = 0.001 ether; //MIN amount because when reserve = exactly 0 (i.e. not given), this contract will try to lend near 0 values near the \"end\" which I think is what causes errors\n        require(msg.value >= reserve, \"Reserve must be less than the amount sent\");\n        require(msg.value > 0, \"Must send some ETH to open a position\");\n        \n        // console.log(\"-----------START-----------\");\n        // console.log(\"Initial _amount: \", _amount);\n        // console.log(\"Reserve: \", reserve);\n        \n        while (true) {\n            // console.log (\"-----------BEGINNING OF LOOP-----------\");\n            // console.log (\"_amount: \", _amount);\n            // console.log(\"CORN balance: \", i_corn.balanceOf(address(this)));\n            // console.log(\"ETH balance: \", address(this).balance);\n            uint256 _amount = address(this).balance;\n\n            i_lending.addCollateral{value: _amount}();\n\n            if (_amount <= reserve || _amount < MIN_AMOUNT) { //SRE implementation can break if no reserve given (i.e. reserve = 0)\n                // console.log(\"-----------END-----------\");\n                break;\n            }\n\n            uint256 maxBorrow = i_lending.getMaxBorrowAmount(_amount);\n\n            i_lending.borrowCorn(maxBorrow);\n\n            i_cornDEX.swap(i_corn.balanceOf(address(this)));\n\n            // console.log(\"AFTER LOGIC\");\n            // console.log(\"_amount: \", _amount);    \n            // console.log(\"CORN balance: \", i_corn.balanceOf(address(this)));\n            // console.log(\"ETH balance: \", address(this).balance);\n\n            loops++;\n            // console.log (\"-----------END OF LOOP-----------\");\n        }\n        emit LeveragedPositionOpened(msg.sender, loops);\n    }\n\n    \n\n    /**\n     * @notice Close a leveraged position, iteratively withdrawing collateral, swapping it for CORN, and repaying the lending contract until the position is closed\n     */\n    function closeLeveragedPosition() public onlyOwner {\n        // console.log(\"-----------START-----------\");\n        uint256 loops = 0;\n        while (true) {\n            // console.log (\"-----------START OF LOOP-----------\");\n            uint256 _amount = i_lending.getMaxWithdrawableCollateral(address(this)); // safety buffer becasue trying to withdraw the exact max caused me errors idk if they were rounding errors or what\n            // console.log(\"_amount: \", _amount);\n            // console.log(\"CORN balance: \", i_corn.balanceOf(address(this)));\n\n            i_lending.withdrawCollateral(_amount);\n            // console.log(\"AFTER WITHDRAWAL\");\n            // console.log(\"ETH balance: \", address(this).balance);\n            // console.log(\"CORN balance: \", i_corn.balanceOf(address(this)));\n            uint256 cornDebt = i_lending.s_userBorrowed(address(this));\n            // console.log(\"CORN debt: \", cornDebt);\n            i_cornDEX.swap{value:_amount}(_amount);\n            uint256 cornBalance = i_corn.balanceOf(address(this));\n            // console.log(\"AFTER SWAP\");\n            // console.log(\"CORN balance: \", i_corn.balanceOf(address(this)));\n            if (cornBalance < cornDebt) {\n                 i_lending.repayCorn(i_corn.balanceOf(address(this)));\n            } else {\n                i_lending.repayCorn(cornDebt);\n                i_lending.withdrawCollateral(i_lending.s_userCollateral(address(this))); //withdraw remaing cuz of my weird rounding issues\n                i_cornDEX.swap(i_corn.balanceOf(address(this)));\n                // console.log (\"-----END-----\");\n                break;\n            }\n            \n            loops++;\n            // console.log (\"-----------END OF LOOP-----------\");\n        }\n        emit LeveragedPositionClosed(msg.sender, loops);\n    }\n\n    /**\n     * @notice Withdraw the ETH from the contract\n     */\n    function withdraw() public onlyOwner {\n        uint256 balance = address(this).balance;\n        require(balance > 0, \"No balance to withdraw\");\n        (bool success, ) = payable(msg.sender).call{value: balance}(\"\");\n        require(success, \"Failed to send Ether\");\n    }\n\n    receive() external payable {}\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}